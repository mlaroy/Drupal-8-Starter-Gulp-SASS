var gulp     = require('gulp');
var base     = require('../../config.json');
var swig     = require('gulp-swig');
var gutil    = require('gulp-util');
var handleErrors = require('../../util/handleErrors')
var rename   = require('gulp-rename');
var fs       = require('fs');
var package  = require('../../../package.json');

module.exports = function(config) {
  var preprocessor = '';
  var suffix = '';

  return function(glyphs, options) {
//    render.nunjucks.configure(config.nunjucks, { watch: false })
    //gutil.log(gutil.colors.red('No preprossessor defined in ' + base.src));

    if(fs.existsSync(base.src + '/less')) {
      preprocessor = 'less';
      suffix = 'less';
    }
    if(fs.existsSync(base.src + '/sass')) {
      preprocessor = 'sass';
      suffix = 'scss';
    }

    if(preprocessor == '') {
      gutil.log(gutil.colors.red('No preprossessor defined in ' + base.src));
      return false;
    } else {
      gutil.log(gutil.colors.blue('Generating `' + package.name + '-icons` - ' + base.src + '/' + preprocessor + '/icons_generated.' + suffix))

      return gulp.src('./gulp/tasks/iconFont/template.swig')
        .pipe(swig(
          {
            data:{
              icons: glyphs.map(function(glyph) {
                gutil.log(gutil.colors.green('+ adding ' + glyph.name + ' glyph'))
                return {
                  name: glyph.name,
                  code: glyph.unicode[0].charCodeAt(0).toString(16).toUpperCase()
                }
              }),
              fontName: package.name + '-icons',
              fontPath: config.fontPath,
              className: 'icon',
              comment: '// DO NOT EDIT DIRECTLY!\n  //Generated by gulpfile.js/tasks/iconFont/index.js\n  //from ' + config.template
            }
          }
        )
      )
      .on('error', handleErrors)
      .pipe(rename('icons_generated.' + suffix))
      .pipe(gulp.dest(base.src + '/' + preprocessor))

    }
  }
}